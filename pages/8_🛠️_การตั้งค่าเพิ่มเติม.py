import pandas as pd
import streamlit as st
from calculate import timestamp
from sql_execute import variable_tb_insert, variable_create_columns,download,download_columns
import datetime
st.set_page_config(
    page_title="‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
    page_icon="üõ†Ô∏è",
)

st.subheader("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° üõ†Ô∏è")
def main():
    expander_independent_variables_field_add()
    expander_crop_details_field_add()
    # expander_crop_detail_products_field_add()
    download_data()



def expander_independent_variables_field_add():
    with st.expander(label="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"):
        with st.form(key="indepentdent_add"):
            col1,col2 = st.columns([1,1])
            columns_table_name = ('independent_variables')
            with col1:
                columns_name = st.text_input(label="‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©",help="1.‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô \n 2.‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏î \n 3.‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏° SQL")
            with col2:
                columns_alias = st.text_input(label="‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢")
            with col1:
                columns_datatype = st.selectbox(label="‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", options=("double precision","integer"),index=1)
            with col2:
                columns_cal = st.selectbox(label="‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå", options=("SUM", "MAX", "MIN", "AVG", "COUNT"), index=1)
            created_at = timestamp()
            col_left,col_center,col_right = st.columns([5,1,5])
            with col_center:
                submit_clicked = st.form_submit_button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")
            if submit_clicked:
                variable_tb_insert(columns_name, columns_alias, columns_datatype, created_at, columns_cal, columns_table_name)
                variable_create_columns(columns_table_name, columns_name, columns_datatype)
                st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ü‡∏¥‡∏•‡∏î‡πå{} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!".format(columns_alias))

def expander_crop_details_field_add():
    with st.expander(label="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"):
        with st.form(key="crop_details_add"):
            columns_table_name = ("crop_details")
            col1, col2 = st.columns([1, 1])
            with col1:
                columns_name = st.text_input(label="‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©",
                                             help="1.‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô \n 2.‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏î \n 3.‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏° SQL")
            with col2:
                columns_alias = st.text_input(label="‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢")
            with col1:
                columns_datatype = st.selectbox(label="‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", options=("double precision", "integer"), index=1)
            with col2:
                columns_cal = st.selectbox(label="‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå",
                                           options=("SUM", "MAX", "MIN", "AVG", "COUNT"), index=1)
            created_at = timestamp()
            col_left,col_center,col_right = st.columns([2,1,2])
            with col_center:
                submit_clicked = st.form_submit_button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")
            if submit_clicked:
                variable_tb_insert(columns_name, columns_alias, columns_datatype, created_at, columns_cal, columns_table_name)
                variable_create_columns(columns_table_name, columns_name, columns_datatype)
                st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ü‡∏¥‡∏•‡∏î‡πå{} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!".format(columns_alias))

def download_data():
    with st.expander("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
        download_options = [['‡∏û‡∏∑‡∏ä','plants'],['‡πÅ‡∏ú‡∏ô','plans'],['‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô','independent_variables'],['‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£','farmers'],['‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å‡∏¢‡πà‡∏≠‡∏¢','crops'],['‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å','crop_details'],['‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß','crop_detail_products']]
        download_selected = st.selectbox("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",options=download_options,format_func=lambda download_options:"{}".format(download_options[0]))
        dt = download(download_selected[1])
        col = download_columns(download_selected[1])
        df = pd.DataFrame(dt,columns=col)
        csv = df.to_csv().encode('utf-8')
        timenow = datetime.datetime.now()
        Date = timenow.strftime('%Y-%m-%d')
        st.download_button(
            label="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î",
            data=csv,
            file_name='{}_{}.csv'.format(download_selected[1],Date),
            mime='text/csv',
        )
main()