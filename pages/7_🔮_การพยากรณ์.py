import pandas as pd
import streamlit as st
import pickle
from sql_execute import models_tb_options,models_tb_select,crop_can_predict_options,predict_arguments,\
columns_name_independent_weather,columns_name_independent_crop
from calculate import transform_colname_th_en,columns_name_for_predicted,solve
st.set_page_config(
    page_title="‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå",
    page_icon="üîÆ",
)
def main():
    st.subheader("‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (Prediction)üîÆ")
    col1, col2 = st.columns([1, 1])
    with col1:
        model_options = models_tb_options()
        model_selected = st.selectbox("1Ô∏è‚É£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á:",options=model_options,format_func=lambda model_options:"{}".format(model_options[2]))
        model_dt = models_tb_select(model_selected[0])
        model_id = model_dt[0]
        plant_id = model_dt[1]
        model = pickle.loads(model_dt[2])
        model_var = model_dt[3]
        model_coef = model_dt[4]
        model_intercept = model_dt[5]
        model_name = model_dt[6]
        model_rmse = model_dt[7]
        model_r2 = model_dt[8]
    with col2:
        crop_predict_options = crop_can_predict_options(model_selected[1])
        crop_predict_selected = st.selectbox("2Ô∏è‚É£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå:",options=crop_predict_options,format_func=lambda crop_predict_options:"‡∏õ‡∏µ {} ‡∏Ñ‡∏£‡∏≠‡∏õ‡∏ó‡∏µ‡πà {}".format(crop_predict_options[2],crop_predict_options[4]))
    model_var_en = transform_colname_th_en(model_dt[3]).values.tolist()
    model_argument_values = predict_arguments(crop_predict_selected[3],model_var_en)
    columns_independent_weather = columns_name_independent_weather()
    columns_independent_crop = columns_name_independent_crop()
    columns_name = columns_name_for_predicted(columns_independent_weather, columns_independent_crop)
    all_arguments = pd.DataFrame(model_argument_values,columns=columns_name,dtype=('float64'))
    model_arguments = all_arguments[model_var]
    if model_arguments.empty is True:
        st.error("‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡∏ô‡πâ‡∏≠‡∏¢‡∏à‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ üòø")
    else:
        with st.expander("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á"):
            predicted = model.predict(model_arguments)
        col1,col2 = st.columns([1,1])
        with col1:
            st.markdown("üßôüèΩ‚Äç‚ôÇÔ∏è**‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï** {:.02f} ‡∏Å‡∏Å.".format(predicted[0]))
            st.caption("**‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô {:.02f} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°".format(model_rmse))
        with col2:
            st.markdown("**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß**ü•¶")
            st.text("üå± ‡∏û‡∏∑‡∏ä: {}".format(crop_predict_selected[1]))
            st.text("üå∞ ‡πÅ‡∏ú‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà: {}".format(crop_predict_selected[2]))
            st.text("üë©üèΩ‚Äçüåæ ‡∏Ñ‡∏£‡∏≠‡∏õ‡∏ó‡∏µ‡πà: {}".format(crop_predict_selected[4]))
            st.text("üìÜ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {}".format(crop_predict_selected[6].strftime("%d %B %Y")))
            st.text("üìÜ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡πâ‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å: {}".format(crop_predict_selected[7].strftime("%d %B %Y")))
            st.text("üìÜ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å: {}".format(crop_predict_selected[8].strftime("%d %B %Y")))
        with st.expander("‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."):
            coefficent_x_var = ("")
            n=0
            for coef_var in (model_coef):
                # st.write(coef_var[0],model_var[n])
                co = coef_var[0]
                if coef_var[0] >= 0:
                    co = str("+") + str(round(coef_var[0], 3))
                else:
                    co = round(co, 3)
                coefficent_x_var = str(co) + str("(") + str(model_var[n]) + str(")") + str(coefficent_x_var)
                n += 1
            st.markdown("**‡∏£‡∏π‡∏õ‡∏™‡∏°‡∏Å‡∏≤‡∏£:**")
            st.text("""‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï = {:.3f} {}""".format(model_intercept, coefficent_x_var))
            if st.checkbox("üëàüèΩ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",value=False):
                st.write(model_arguments)
            st.markdown("**‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤**")
            n=0
            for coef_var in model_coef:
                if coef_var[0] >= 0:
                    st.text("{}. ‡πÄ‡∏°‡∏∑‡πà‡∏≠{}‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡∏™‡πà‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô {} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°".format(n+1,model_var[n],str(round(coef_var[0],2)).replace("+","")))
                else:
                    st.text("{}. ‡πÄ‡∏°‡∏∑‡πà‡∏≠{}‡∏•‡∏î‡∏•‡∏á 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡∏™‡πà‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô {} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°".format(n+1,model_var[n],str(round(coef_var[0],2)).replace("-","")))
                n += 1
            col1,col2 = st.columns([1,1])
            with col1:
                weight = st.number_input("‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:",min_value=0.00,format=("%f"))
            with col2:
                control = st.selectbox("‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏î‡πâ:",options=(model_var),format_func=lambda model_var:"{}".format(model_var))
            st.markdown("**‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°**")
            col = []
            for i in model_var:
                col.append(i)
            model_arguments.columns=col
            equation = ("")
            n =0
            for col_name in (model_arguments):
                value = model_arguments[col_name].tolist()
                if col_name == control:
                    value = str("x")
                else:
                    value = value[0]
                coef = abs(model_coef[n][0])
                if model_coef[n][0] >=0:
                    equation = ("+ ({} * {})".format(coef,value)) + equation
                else:
                    equation = ("- ({} * {})".format(coef,value)) + equation
                n += 1
            equation = str(weight) + str(" = ") + str(model_intercept) + equation
            # st.write(equation)
            answer = solve(equation)
            if answer == "No solution":
                st.error("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ï‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏≠‡∏∑‡πà‡∏ô")
            else:
                st.markdown("‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°{}‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö {} ‡∏´‡∏ô‡πà‡∏ß‡∏¢".format(control,round(float(answer),2)))
            st.caption("*‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏≤‡∏°‡πÑ‡∏î‡πâ {}% ".format(round(model_r2,2)*100))
            st.caption("**‡πÇ‡∏õ‡∏£‡∏î‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏á‡∏ó‡∏µ‡πà")
main()
